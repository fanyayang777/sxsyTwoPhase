<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.sayee.sxsy.modules.casefeedback.dao.CaseFeedbackDao">
    
	<sql id="caseFeedbackColumns">
		if(a.feedback_id IS NULL ,r.report_registration_id,a.feedback_id) AS "feedbackId",
		if(a.complaint_main_id IS NULL,r.complaint_main_id,a.complaint_main_id) AS "complaintMainId",
		a.feedback_emp AS "feedbackEmp",
		a.feedback_office AS "feedbackOffice",
		a.create_by AS "createBy.id",
		if(a.create_by IS NULL,au.create_by,a.create_by) AS "createUser",
		a.create_date AS "createDate",
		a.update_by AS "updateBy.id",
		a.update_date AS "updateDate",
		a.del_flag AS "delFlag",
		b.case_number AS "complaintMain.caseNumber",
		b.patient_name AS "complaintMain.patientName",
		b.patient_sex AS "complaintMain.patientSex",
		b.patient_age AS "complaintMain.patientAge",
		b.patient_card AS "complaintMain.patientCard",
		b.involve_hospital AS "complaintMain.involveHospital",
		b.hospital_level AS "complaintMain.hospitalLevel",
		b.hospital_grade AS "complaintMain.hospitalGrade",
		b.involve_department AS "complaintMain.involveDepartment",
		b.involve_employee AS "complaintMain.involveEmployee",
		b.proc_ins_id AS "complaintMain.procInsId",
		b.is_major AS "complaintMain.isMajor",
		o1.name AS "complaintMain.department.name",
		u1.name AS "complaintMain.employee.name",
-- 		u2.name AS "linkEmployee.name",
		t.ID_ AS "complaintMain.act.taskId",
		sa.name AS "area.name",
		o.name AS "complaintMain.hospital.name",
		sign.summary_of_disputes AS "summaryOfDisputes",
		au.policy_number AS "auditAcceptance.policyNumber",
		au.diagnosis_mode AS "auditAcceptance.diagnosisMode",
		au.treatment_outcome AS "auditAcceptance.treatmentOutcome",
		r.report_emp AS "reportRegistration.reportEmp",
		r.dispute_time AS "reportRegistration.disputeTime",
		r.patient_mobile AS "reportRegistration.patientMobile",
		group_concat(DISTINCT(us.name)) AS "feedbackEmps.name",
		group_concat(DISTINCT(off.name)) AS "feedbackOffices.name"
	</sql>
	
	<sql id="caseFeedbackJoins">
		LEFT JOIN CASE_FEEDBACK a ON a.complaint_main_id = b.complaint_main_id
		LEFT JOIN REPORT_REGISTRATION r ON r.complaint_main_id = b.complaint_main_id
		LEFT JOIN AUDIT_ACCEPTANCE au ON au.complaint_main_id = b.complaint_main_id
		LEFT JOIN SIGN_AGREEMENT sign ON sign.complaint_main_id = b.complaint_main_id
		LEFT JOIN ACT_RU_TASK t on t.PROC_INST_ID_=b.PROC_INS_ID
		LEFT JOIN SYS_OFFICE o on o.id=b.involve_hospital
		LEFT JOIN SYS_AREA sa ON sa.id=o.area_id
		LEFT JOIN SYS_OFFICE o1 ON o1.id=b.involve_department
		LEFT JOIN SYS_USER u1 ON u1.id=b.involve_employee
		LEFT JOIN SYS_USER us ON INSTR(a.feedback_emp,us.id)>0 and length(us.id)=32
		LEFT JOIN SYS_OFFICE off ON INSTR(a.feedback_office,off.id)>0 and length(off.id)=32

	</sql>
    
	<select id="get" resultType="CaseFeedback">
		SELECT
			<include refid="caseFeedbackColumns"/>
		FROM COMPLAINT_MAIN b
		<include refid="caseFeedbackJoins"/>
		WHERE a.feedback_id = #{feedbackId} OR r.report_registration_id = #{feedbackId}
	</select>
	
	<select id="findList" resultType="CaseFeedback">
		SELECT 
			<include refid="caseFeedbackColumns"/>
		FROM COMPLAINT_MAIN b
		<include refid="caseFeedbackJoins"/>
		<where>
			if(a.del_flag IS NOT NULL,a.del_flag = #{DEL_FLAG_NORMAL},r.del_flag = #{DEL_FLAG_NORMAL})  AND b.PROC_INS_ID is NOT NULL	AND t.TASK_DEF_KEY_='feedback'
			<if test="user != null and user.id != null and user.id != ''">
				AND t.ASSIGNEE_ LIKE CONCAT('%', #{user.loginName}, '%')
			</if>
			<if test="reportRegistration != null and reportRegistration.reportEmp != null and reportRegistration.reportEmp !=''">
				AND r.report_emp = #{reportRegistration.reportEmp}
			</if>
			<if test="complaintMain !=null and complaintMain.patientName != null and complaintMain.patientName != ''">
				AND b.patient_name LIKE CONCAT('%', #{complaintMain.patientName}, '%')
			</if>
			<if test="complaintMain !=null and complaintMain.caseNumber != null and complaintMain.caseNumber != ''">
				AND b.case_number LIKE CONCAT('%', #{complaintMain.caseNumber}, '%')
			</if>
			<if test="complaintMain !=null and complaintMain.involveHospital != null and complaintMain.involveHospital != ''">
				AND b.involve_hospital LIKE CONCAT('%', #{complaintMain.involveHospital}, '%')
			</if>
			<if test="reportRegistration != null and reportRegistration.patientMobile != null and reportRegistration.patientMobile !=''">
				AND r.patient_mobile LIKE CONCAT('%', #{reportRegistration.patientMobile}, '%')
			</if>
		</where>
		<choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}
			</when>
			<otherwise>
				ORDER BY a.update_date DESC
			</otherwise>
		</choose>
	</select>
	
	<select id="findAllList" resultType="CaseFeedback">
		SELECT 
			<include refid="caseFeedbackColumns"/>
		FROM CASE_FEEDBACK a
		<include refid="caseFeedbackJoins"/>
		<where>
			a.del_flag = #{DEL_FLAG_NORMAL}
		</where>		
		<choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}
			</when>
			<otherwise>
				ORDER BY a.update_date DESC
			</otherwise>
		</choose>
	</select>
	
	<insert id="insert">
		INSERT INTO CASE_FEEDBACK(
			feedback_id,
			complaint_main_id,
			feedback_emp,
			feedback_office,
			create_by,
			create_date,
			update_by,
			update_date,
			del_flag
		) VALUES (
			#{feedbackId},
			#{complaintMainId},
			#{feedbackEmp},
			#{feedbackOffice},
			#{createBy.id},
			#{createDate},
			#{updateBy.id},
			#{updateDate},
			#{delFlag}
		)
	</insert>
	
	<update id="update">
		UPDATE CASE_FEEDBACK SET
			feedback_emp = #{feedbackEmp},
			feedback_office = #{feedbackOffice}
		WHERE feedback_id = #{feedbackId}
	</update>
	
	<update id="delete">
		UPDATE CASE_FEEDBACK SET
			del_flag = #{DEL_FLAG_DELETE}
		WHERE feedback_id = #{feedbackId}
	</update>

	<select id="getViewDetail" resultType="java.util.Map">
		SELECT b.complaint_main_detail_id AS "tsjd",
		r.report_registration_id AS "badj",
		d.audit_acceptance_id AS "shsl",
		e.investigate_evidence_id AS "dcqz",
		f.mediate_evidence_id AS "zztj",
		g.assess_apply_id AS "pgjdsq",
		h.assess_audit_id AS "pgjdsp",
		i.assess_appraisal_id AS "pgjd",
		j.reach_mediate_id AS "dctj",
		k.sign_agreement_id AS "qsxy",
		l.perform_agreement_id AS "lxxy",
		su.summary_id AS "jazj",
		ai.assess_id AS "ajpj"
		FROM COMPLAINT_MAIN a
		LEFT JOIN COMPLAINT_MAIN_DETAIL b on a.complaint_main_id=b.complaint_main_id
		LEFT JOIN REPORT_REGISTRATION r on r.complaint_main_id=a.complaint_main_id
		LEFT JOIN AUDIT_ACCEPTANCE d on d.complaint_main_id=a.complaint_main_id
		LEFT JOIN INVESTIGATE_EVIDENCE e on e.complaint_main_id=a.complaint_main_id AND e.investigate_type='1'
		LEFT JOIN MEDIATE_EVIDENCE f on f.complaint_main_id=a.complaint_main_id
		LEFT JOIN ASSESS_APPLY g on g.complaint_main_id=a.complaint_main_id
		LEFT JOIN ASSESS_AUDIT h on h.complaint_main_id=a.complaint_main_id
		LEFT JOIN ASSESS_APPRAISAL i on i.complaint_main_id=a.complaint_main_id
		LEFT JOIN REACH_MEDIATE j on j.complaint_main_id=a.complaint_main_id
		LEFT JOIN SIGN_AGREEMENT k on k.complaint_main_id=a.complaint_main_id
		LEFT JOIN PERFORM_AGREEMENT l on l.complaint_main_id=a.complaint_main_id
		LEFT JOIN SUMMARY_INFO su on su.complaint_main_id=a.complaint_main_id
		LEFT JOIN ASSESS_INFO ai ON  ai.complaint_main_id=a.complaint_main_id
		WHERE a.complaint_main_id = #{complaintMainId}
	</select>
</mapper>