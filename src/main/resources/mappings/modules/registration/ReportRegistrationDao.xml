<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.sayee.sxsy.modules.registration.dao.ReportRegistrationDao">

	<sql id="reportRegistrationColumns">
		if(a.report_registration_id IS NULL,d.complaint_main_detail_id,a.report_registration_id) AS "reportRegistrationId",
		if(a.complaint_main_id IS NULL,d.complaint_main_id,a.complaint_main_id) AS "complaintMainId",
		if(a.report_emp IS NULL,d.visitor_name,a.report_emp) AS "reportEmp",
		if(a.patient_mobile IS NULL,d.visitor_mobile,a.patient_mobile) AS "patientMobile",
		a.patient_relation AS "patientRelation",
		if(a.report_time IS NULL,d.visitor_date,a.report_time) AS "reportTime",
		if(a.registration_emp IS NULL,d.reception_employee,a.registration_emp) AS "registrationEmp",
		if(a.registration_time IS NULL,d.reception_date,a.registration_time )AS "registrationTime",
		a.dispute_time AS "disputeTime",
		if(a.is_major IS NULL,d.is_major,a.is_major )AS "isMajor",
		if(a.summary_of_disputes IS NULL,d.summary_of_disputes,a.summary_of_disputes)AS "summaryOfDisputes",
		a.focus AS "focus",
		a.patient_ask AS "patientAsk",
		a.next_link AS "nextLink",
		a.next_link_man AS "nextLinkMan",
		a.create_by AS "createBy.id",
		a.create_date AS "createDate",
		a.update_by AS "updateBy.id",
		a.update_date AS "updateDate",
		a.del_flag AS "delFlag",
		a.doctor_mobile AS "doctorMobile",
		a.policy_number AS "policyNumber",
		b.case_number AS "complaintMain.caseNumber",
		b.patient_name AS "complaintMain.patientName",
		b.patient_sex AS "complaintMain.patientSex",
		b.patient_age AS "complaintMain.patientAge",
		b.patient_card AS "complaintMain.patientCard",
		b.involve_hospital AS "complaintMain.involveHospital",
		b.hospital_level AS "complaintMain.hospitalLevel",
		b.hospital_grade AS "complaintMain.hospitalGrade",
		b.involve_department AS "complaintMain.involveDepartment",
		b.involve_employee AS "complaintMain.involveEmployee",
		b.proc_ins_id AS "complaintMain.procInsId",
		m1.machine_account_id AS "machineAccount.machineAccountId",
		m1.complaint_main_id AS "machineAccount.complaintMainId",
		m1.reporting_time AS "machineAccount.reportingTime",
		m1.dept_id AS "machineAccount.deptId",
		m1.mediator_id AS "machineAccount.mediatorId",
		m1.patient_name AS "machineAccount.patientName",
		m1.hospital_id AS "machineAccount.hospitalId",
		m1.major AS "machineAccount.major",
		m1.insurance_company AS "machineAccount.insuranceCompany",
		m1.policy_number AS "machineAccount.policyNumber",
		m1.start_insurance_time AS "machineAccount.startInsuranceTime",
		m1.disputes_time AS "machineAccount.disputesTime",
		m1.risk_time AS "machineAccount.riskTime",
		m1.summary_of_disputes AS "machineAccount.summaryOfDisputes",
		m1.is_major AS "machineAccount.isMajor",
		m1.treatment_mode AS "machineAccount.treatmentMode",
		m1.treatment_result AS "machineAccount.treatmentResult",
		m1.patients_reflect_focus AS "machineAccount.patientsReflectFocus",
		m1.related_major AS "machineAccount.relatedMajor",
		m1.assess_time AS "machineAccount.assessTime",
		m1.assess_number AS "machineAccount.assessNumber",
		m1.duty_ratio AS "machineAccount.dutyRatio",
		m1.feedback_time AS "machineAccount.feedbackTime",
		m1.agreement_number AS "machineAccount.agreementNumber",
		m1.ratify_accord AS "machineAccount.ratifyAccord",
		m1.agreement_stamp_time AS "machineAccount.agreementStampTime",
		m1.agreement_amount AS "machineAccount.agreementAmount",
		m1.insurance_amount AS "machineAccount.insuranceAmount",
		m1.claim_settlement_time AS "machineAccount.claimSettlementTime",
		m1.compensate_time AS "machineAccount.compensateTime",
		m1.flow_days AS "machineAccount.flowDays",
		m1.hand_over AS "machineAccount.handOver",
		m1.archive_time AS "machineAccount.archiveTime",
		m1.file_number AS "machineAccount.fileNumber",
		m1.remark AS "machineAccount.remark",
		m1.create_by AS "machineAccount.createBy.id",
		m1.create_date AS "machineAccount.createDate",
		m1.update_by AS "machineAccount.updateBy.id",
		m1.update_date AS "machineAccount.updateDate",
		m1.del_flag AS "machineAccount.delFlag",
		sa.name AS "complaintMain.hospital.area.name",
		u.name AS "djEmployee.name",
		o.name AS "complaintMain.hospital.name",
		o1.name AS "complaintMain.department.name",
		u1.name AS "complaintMain.employee.name",
		u2.name AS "linkEmployee.name",
		t.ID_ AS "complaintMain.act.taskId",
		t.ASSIGNEE_ AS "complaintMain.act.assigneeName",
		sd.label AS "dict.name",
		group_concat(DISTINCT(te.name))AS "complaintMain.testTree"
	</sql>

	<sql id="reportRegistrationJoins">
		LEFT JOIN REPORT_REGISTRATION a ON a.complaint_main_id = b.complaint_main_id
		LEFT JOIN COMPLAINT_MAIN_DETAIL d on d.complaint_main_id=b.complaint_main_id
		LEFT JOIN MACHINE_ACCOUNT m1 ON m1.complaint_main_id = a.complaint_main_id AND m1.del_flag=0
		LEFT JOIN ACT_RU_TASK t on t.PROC_INST_ID_=b.PROC_INS_ID
		LEFT JOIN SYS_OFFICE o on o.id=b.involve_hospital
		LEFT JOIN TEST_TREE te ON INSTR(b.involve_department,te.id)>0 and length(te.id)=32
 		LEFT JOIN SYS_AREA sa ON sa.id=o.area_id
 		LEFT JOIN SYS_OFFICE o1 ON o1.id=b.involve_department
		LEFT JOIN SYS_USER u1 ON u1.id=b.involve_employee
		LEFT JOIN SYS_USER u ON u.id=a.registration_emp
		LEFT JOIN SYS_USER u2 ON u2.id = if(a.next_link_man IS NULL OR a.next_link_man = '',d.next_link_man,a.next_link_man)
		LEFT JOIN SYS_DICT sd ON sd.value =b.hospital_level AND sd.type='sys_office_grade'
	</sql>

	<select id="get" resultType="ReportRegistration">
		SELECT
		<include refid="reportRegistrationColumns"/>
		FROM COMPLAINT_MAIN b
		<include refid="reportRegistrationJoins"/>
		WHERE a.report_registration_id = #{reportRegistrationId} OR  d.complaint_main_detail_id=#{reportRegistrationId}
	</select>

	<select id="findList" resultType="ReportRegistration">
		SELECT
		<include refid="reportRegistrationColumns"/>
		FROM COMPLAINT_MAIN b
		<include refid="reportRegistrationJoins"/>
		<where>
			if(a.del_flag IS NOT NULL,a.del_flag = #{DEL_FLAG_NORMAL},d.del_flag = #{DEL_FLAG_NORMAL})  AND b.PROC_INS_ID is NOT null and t.TASK_DEF_KEY_='enrollment'
			<if test="user != null and user.id != null and user.id != ''">
				AND t.ASSIGNEE_ LIKE CONCAT('%', #{user.loginName}, '%')
			</if>
			<if test="list != null and list != ''">
				AND t.ASSIGNEE_ in
				<foreach collection="list" item="id" index="index" open="(" close=")" separator=",">
					#{id}
				</foreach>
			</if>
			<if test="reportEmp != null and reportEmp != ''">
				AND a.report_emp = #{reportEmp}
			</if>
			<if test="patientMobile != null and patientMobile != ''">
				AND a.patient_mobile = #{patientMobile}
			</if>
			<if test="reportTime != null and reportTime != ''">
				AND a.report_time LIKE
				<if test="dbName == 'oracle'">'%'||#{reportTime}||'%'</if>
				<if test="dbName == 'mssql'">'%'+#{reportTime}+'%'</if>
				<if test="dbName == 'mysql'">concat('%',#{reportTime},'%')</if>
			</if>
			<if test="complaintMain !=null and complaintMain.patientName != null and complaintMain.patientName != ''">
				AND b.patient_name LIKE CONCAT('%', #{complaintMain.patientName}, '%')
			</if>
			<if test="complaintMain !=null and complaintMain.caseNumber != null and complaintMain.caseNumber != ''">
				AND b.case_number LIKE CONCAT('%', #{complaintMain.caseNumber}, '%')
			</if>
			<if test="complaintMain !=null and complaintMain.involveHospital != null and complaintMain.involveHospital != ''">
				AND b.involve_hospital LIKE CONCAT('%', #{complaintMain.involveHospital}, '%')
			</if>
		</where>
		GROUP BY b.complaint_main_id
		<choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}
			</when>
			<otherwise>
				ORDER BY a.update_date DESC
			</otherwise>
		</choose>
	</select>

	<select id="findAllList" resultType="ReportRegistration">
		SELECT
		<include refid="reportRegistrationColumns"/>
		FROM REPORT_REGISTRATION a
		<include refid="reportRegistrationJoins"/>
		<where>
			a.del_flag = #{DEL_FLAG_NORMAL}
		</where>
		<choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}
			</when>
			<otherwise>
				ORDER BY a.update_date DESC
			</otherwise>
		</choose>
	</select>

	<insert id="insert">
		INSERT INTO REPORT_REGISTRATION(
			report_registration_id,
			complaint_main_id,
			report_emp,
			patient_mobile,
			patient_relation,
			report_time,
			registration_emp,
			registration_time,
			dispute_time,
			is_major,
			summary_of_disputes,
			focus,
			patient_ask,
			next_link,
			next_link_man,
			create_by,
			create_date,
			update_by,
			update_date,
			del_flag,
			doctor_mobile,
		    policy_number
		) VALUES (
			#{reportRegistrationId},
			#{complaintMainId},
			#{reportEmp},
			#{patientMobile},
			#{patientRelation},
			#{reportTime},
			#{registrationEmp},
			#{registrationTime},
			#{disputeTime},
			#{isMajor},
			#{summaryOfDisputes},
			#{focus},
			#{patientAsk},
			#{nextLink},
			#{nextLinkMan},
			#{createBy.id},
			#{createDate},
			#{updateBy.id},
			#{updateDate},
			#{delFlag},
			#{doctorMobile},
			#{policyNumber}
		)
	</insert>

	<update id="update">
		UPDATE REPORT_REGISTRATION SET
			report_emp = #{reportEmp},
			patient_mobile = #{patientMobile},
			patient_relation = #{patientRelation},
			report_time = #{reportTime},
			registration_emp = #{registrationEmp},
			registration_time = #{registrationTime},
			dispute_time = #{disputeTime},
			is_major = #{isMajor},
			summary_of_disputes = #{summaryOfDisputes},
			focus = #{focus},
			patient_ask = #{patientAsk},
			next_link = #{nextLink},
			next_link_man = #{nextLinkMan},
			update_by = #{updateBy.id},
			update_date = #{updateDate},
			doctor_mobile = #{doctorMobile},
		    policy_number = #{policyNumber}
		WHERE report_registration_id = #{reportRegistrationId}
	</update>

	<update id="delete">
		UPDATE REPORT_REGISTRATION SET
			del_flag = #{DEL_FLAG_DELETE}
		WHERE report_registration_id = #{reportRegistrationId}
	</update>

</mapper>