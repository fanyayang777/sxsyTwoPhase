<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.sayee.sxsy.modules.complaintmain.dao.ComplaintMainDao">
    
	<sql id="complaintMainColumns">
		a.complaint_main_id AS "complaintMainId",
		a.case_number AS "caseNumber",
		a.patient_name AS "patientName",
		a.patient_sex AS "patientSex",
		a.patient_age AS "patientAge",
		a.patient_card AS "patientCard",
		a.patient_mobile AS "patientMobile",
		a.involve_hospital AS "involveHospital",
		a.hospital_level AS "hospitalLevel",
		a.hospital_grade AS "hospitalGrade",
		a.involve_department AS "involveDepartment",
		a.involve_employee AS "involveEmployee",
		a.proc_ins_id AS "procInsId",
		a.create_by AS "createById",
		a.create_date AS "createDate",
		a.update_by AS "updateById",
		a.update_date AS "updateDate",
		a.del_flag AS "delFlag",
		a.source AS  "source",
		o.name AS "hospital.name",
		o1.name AS "department.name",
		u.name AS "employee.name",
		group_concat(DISTINCT(te.name))AS "testTree"
	</sql>
	
	<sql id="complaintMainJoins">
		  LEFT JOIN SYS_OFFICE o ON o.id=a.involve_hospital
		  LEFT JOIN SYS_OFFICE o1 ON o1.id=a.involve_department
		  LEFT JOIN SYS_USER u ON u.id=a.involve_employee
		  LEFT JOIN TEST_TREE te ON INSTR(a.involve_department,te.id)>0 and length(te.id)=32
	</sql>
    
	<select id="get" resultType="ComplaintMain">
		SELECT 
			<include refid="complaintMainColumns"/>
		FROM COMPLAINT_MAIN a
		<include refid="complaintMainJoins"/>
		WHERE a.complaint_main_id = #{complaintMainId}
	</select>
	
	<select id="findList" resultType="ComplaintMain">
		SELECT 
			<include refid="complaintMainColumns"/>
		FROM COMPLAINT_MAIN a
		<include refid="complaintMainJoins"/>
		<where>
			a.del_flag = #{DEL_FLAG_NORMAL}
			<if test="caseNumber != null and caseNumber != ''">
				AND a.case_number = #{caseNumber}
			</if>
			<if test="patientName != null and patientName != ''">
				AND a.patient_name = #{patientName}
			</if>
			<if test="involveHospital != null and involveHospital != ''">
				AND a.involve_hospital = #{involveHospital}
			</if>
			<if test="involveDepartment != null and involveDepartment != ''">
				AND a.involve_department = #{involveDepartment}
			</if>
		</where>
		<choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}
			</when>
			<otherwise>
				ORDER BY a.update_date DESC
			</otherwise>
		</choose>
	</select>
	
	<select id="findAllList" resultType="ComplaintMain">
		SELECT 
			<include refid="complaintMainColumns"/>
		FROM COMPLAINT_MAIN a
		<include refid="complaintMainJoins"/>
		<where>
			a.del_flag = #{DEL_FLAG_NORMAL}
		</where>		
		<choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}
			</when>
			<otherwise>
				ORDER BY a.update_date DESC
			</otherwise>
		</choose>
	</select>
	
	<insert id="insert">
		INSERT INTO COMPLAINT_MAIN(
			complaint_main_id,
			case_number,
			patient_name,
			patient_sex,
			patient_age,
			patient_card,
			patient_mobile,
			involve_hospital,
			hospital_level,
			hospital_grade,
			involve_department,
			involve_employee,
			proc_ins_id,
			create_by,
			create_date,
			update_by,
			update_date,
			del_flag,
			source
		) VALUES (
			#{complaintMainId},
			#{caseNumber},
			#{patientName},
			#{patientSex},
			#{patientAge},
			#{patientCard},
			#{patientMobile},
			#{involveHospital},
			#{hospitalLevel},
			#{hospitalGrade},
			#{involveDepartment},
			#{involveEmployee},
			#{procInsId},
			#{createById},
			#{createDate},
			#{updateById},
			#{updateDate},
			#{delFlag},
			#{source}
		)
	</insert>
	
	<update id="update">
		UPDATE COMPLAINT_MAIN SET
			case_number = #{caseNumber},
			patient_name = #{patientName},
			patient_sex = #{patientSex},
			patient_age = #{patientAge},
			patient_card = #{patientCard},
			patient_mobile = #{patientMobile},
			involve_hospital = #{involveHospital},
			hospital_level = #{hospitalLevel},
			hospital_grade = #{hospitalGrade},
			involve_department = #{involveDepartment},
			involve_employee = #{involveEmployee},
			update_date = #{updateDate}
		WHERE complaint_main_id = #{complaintMainId}
	</update>
	
	<update id="delete">
		UPDATE COMPLAINT_MAIN SET
			del_flag = #{DEL_FLAG_DELETE}
		WHERE complaint_main_id = #{complaintMainId}
	</update>

	<select id="findCount" resultType="Long">
		SELECT
		count(DISTINCT(PROC_INST_ID_))
		FROM ACT_HI_TASKINST a
        RIGHT JOIN COMPLAINT_MAIN c on c.PROC_INS_ID=a.PROC_INST_ID_
		<choose>
			<when test="loginName != null and loginName != ''">
				WHERE a.ASSIGNEE_ = #{loginName}  AND (a.DELETE_REASON_ IS NULL or a.END_TIME_ IS NULL or a.DURATION_ IS NULL)
			</when>
			<otherwise>
				WHERE 1=2
			</otherwise>
		</choose>
	</select>


    <select id="selfList" resultType="ComplaintMain">
        SELECT
        c.complaint_main_id AS "complaintMainId",
        c.case_number AS "caseNumber",
        c.patient_name AS "patientName",
        c.patient_sex AS "patientSex",
        c.patient_age AS "patientAge",
        c.patient_card AS "patientCard",
        c.patient_mobile AS "patientMobile",
        c.involve_hospital AS "involveHospital",
        c.hospital_level AS "hospitalLevel",
        c.hospital_grade AS "hospitalGrade",
        c.involve_department AS "involveDepartment",
        c.involve_employee AS "involveEmployee",
        c.proc_ins_id AS "procInsId",
        c.create_by AS "createById",
        c.create_date AS "createDate",
        c.update_by AS "updateById",
        c.update_date AS "updateDate",
        c.del_flag AS "delFlag",
        o.name AS "hospital.name",
        o1.name AS "department.name",
        u.name AS "employee.name",
        a.TASK_DEF_KEY_ AS "taskDefKey",
        a.NAME_ AS "nodeName"
        FROM ACT_HI_TASKINST a
        RIGHT JOIN COMPLAINT_MAIN c on c.PROC_INS_ID=a.PROC_INST_ID_
        LEFT JOIN SYS_OFFICE o ON o.id=c.involve_hospital
        LEFT JOIN SYS_OFFICE o1 ON o1.id=c.involve_department
        LEFT JOIN SYS_USER u ON u.id=c.involve_employee
        <choose>
            <when test="loginName != null and loginName != ''">
                WHERE a.ASSIGNEE_ = #{loginName} AND (a.DELETE_REASON_ IS NULL or a.END_TIME_ IS NULL or a.DURATION_ IS NULL)
                GROUP BY a.PROC_INST_ID_
            </when>
            <otherwise>
                WHERE 1=2
            </otherwise>
        </choose>
    </select>

    <select id="getKey" resultType="java.lang.String">
		SELECT ${key}  FROM
			${table}
		WHERE complaint_main_id = #{complaintMainId} AND del_flag =0
		<if test="table =='INVESTIGATE_EVIDENCE'">
			AND investigate_type='1'
		</if>
	</select>


	<select id="getMyDone" resultType="ComplaintMain">
		SELECT
		c.complaint_main_id AS "complaintMainId",
		c.case_number AS "caseNumber",
		c.patient_name AS "patientName",
		c.patient_sex AS "patientSex",
		c.patient_age AS "patientAge",
		c.patient_card AS "patientCard",
		c.patient_mobile AS "patientMobile",
		c.involve_hospital AS "involveHospital",
		c.hospital_level AS "hospitalLevel",
		c.hospital_grade AS "hospitalGrade",
		c.involve_department AS "involveDepartment",
		c.involve_employee AS "involveEmployee",
		c.proc_ins_id AS "procInsId",
		c.create_by AS "createById",
		c.create_date AS "createDate",
		c.update_by AS "updateById",
		c.update_date AS "updateDate",
		c.del_flag AS "delFlag",
		aa.TASK_DEF_KEY_ AS "taskDefKey",
		aa.NAME_ AS "nodeName"
		FROM  (select PROC_INST_ID_,ASSIGNEE_ FROM ACT_HI_TASKINST
		where TASK_DEF_KEY_ in ('assess','feedback','end')
		GROUP BY PROC_INST_ID_) a
		<choose>
			<when test="loginName != null and loginName != ''">
				LEFT  JOIN (select * from ACT_HI_TASKINST where ASSIGNEE_= #{loginName} and (END_TIME_ IS NULL or END_TIME_ ='')) aa on a.PROC_INST_ID_=aa.PROC_INST_ID_
				LEFT JOIN COMPLAINT_MAIN c on c.PROC_INS_ID=aa.PROC_INST_ID_
				GROUP BY a.PROC_INST_ID_
			</when>
			<otherwise>
				LEFT JOIN COMPLAINT_MAIN c on c.PROC_INS_ID=a.PROC_INST_ID_
				where 1=2
			</otherwise>
		</choose>

	</select>

	<!--主任查看的案件分类统计-->
	<select id="findTypeInfo" resultType="java.util.Map">
		SELECT CONCAT('\'',t.name,'\'') typeName,COUNT(t.name) num
		FROM COMPLAINT_MAIN_DETAIL c
		LEFT JOIN TEST_TREE t on c.is_major=t.id
		WHERE t.name is not null
		GROUP BY t.name
	</select>
</mapper>